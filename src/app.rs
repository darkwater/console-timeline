use egui::{Frame, Margin, RichText, ScrollArea, Vec2};
use serde::{Deserialize, Serialize};

use crate::timeline::Timeline;

#[derive(Default, Serialize, Deserialize)]
#[serde(default)]
pub struct TemplateApp {}

impl TemplateApp {
    pub fn new(cc: &eframe::CreationContext<'_>) -> Self {
        if let Some(storage) = cc.storage {
            eframe::get_value(storage, eframe::APP_KEY).unwrap_or_default()
        } else {
            Default::default()
        }
    }
}

impl eframe::App for TemplateApp {
    fn save(&mut self, storage: &mut dyn eframe::Storage) {
        eframe::set_value(storage, eframe::APP_KEY, self);
    }

    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        egui::TopBottomPanel::top("top panel").show(ctx, |ui| {
            ui.horizontal_wrapped(|ui| {
                ui.spacing_mut().item_spacing.x = 0.;

                ui.label(
                    RichText::new(
                        "âš  Data generated by ChatGPT. \
                        I'll do fact-checking later, I just wanna focus on the UI for now. \
                        Feel free to open issues/PRs: ",
                    )
                    .color(ui.visuals().warn_fg_color),
                );

                ui.hyperlink("https://github.com/darkwater/console-timeline");
            });
        });

        egui::TopBottomPanel::bottom("bottom panel").show(ctx, |ui| {
            ui.label("Controls will go here");
        });

        egui::CentralPanel::default()
            .frame(Frame::central_panel(&ctx.style()).inner_margin(Margin::ZERO))
            .show(ctx, |ui| {
                ui.spacing_mut().item_spacing = Vec2::ZERO;

                ScrollArea::both()
                    .auto_shrink(false)
                    .show_viewport(ui, |ui, viewport| {
                        Timeline { viewport }.show(ui);
                    });
            });
    }
}
